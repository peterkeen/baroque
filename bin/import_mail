#!/usr/bin/env ruby

require 'rubygems'
require 'yajl/json_gem'
require 'mail'
require 'email_reply_parser'
require 'tempfile'

begin
  require 'baroque'
rescue LoadError => e
  path = File.expand_path '../../lib', __FILE__
  $:.unshift(path) if File.directory?(path) && !$:.include?(path)
  require 'baroque'
end

require 'baroque/object_store'

MAX_IMPORT = 1000000

def plain_body(msg)
  if not msg
    return ''
  end
  if msg.multipart?
    if msg.parts.length > 0
      return msg.parts[0].body.to_s
    else
      return ''
    end
  else
    return msg.body.to_s
  end
end

def mime_types(msg)
  types = []
  if not msg
    return types
  end
  if msg.multipart?
    msg.parts.each do |part|
      types << part.mime_type
    end
  else
    types << msg.mime_type
  end
  types
end

o = Baroque::ObjectStore.new("messages")

n = 0

file = Tempfile.new("/tmp/index")

def flush_objects(file)
  file.flush
  flush = `curl --data-binary @#{file.path} http://localhost:9200/_bulk`
  flush = JSON.parse(flush)
  file.rewind
  file.truncate(0)
  puts "Took #{flush['took']} to flush #{flush['items'].length}"
end
  
o.each_object do |key, raw|
  obj = JSON.parse(raw)

  message = Mail::Message.new(obj.delete('original'))
  body = plain_body(message)
  stripped = EmailReplyParser.read(body).visible_text[0,200]

  obj['body'] = body
  obj['body_preview'] = stripped
  obj['message_id'] = message.message_id
  obj['in_reply_to'] = message.in_reply_to
  obj['references'] = message.references
  obj['key'] = key
  obj['cc'] = message.cc
  obj['mime_types'] = mime_types(message)
  obj['labels'] += obj['flags']

  file.write("{\"index\": {\"_index\": \"messages\", \"_type\": \"message\", \"_id\": #{obj['id']}}}\n")
  file.write(obj.to_json + "\n")
  n += 1

  if n % 100 == 0
    puts n
    puts obj['id']
  end

  if n % 10000 == 0
    flush_objects(file)
  end

  if n == MAX_IMPORT
    break
  end
end

flush_objects(file)
